! Copyright (C) 2020 Bolding & Bruggeman and Hans Burchard

!> @note
!> array indices!!!!!
!> @endnote

#define _AUTOMATIC_

!KB MODULE _MODULE_NAME_

!---------------------------------------------------------------------------

!KB CONTAINS

!---------------------------------------------------------------------------

SUBROUTINE _U_SUB_NAME_(imin,imax,jmin,jmax,umask,dxu,dyu,hu,u,tmask,iA,dt,h,f)

   USE, INTRINSIC :: ISO_FORTRAN_ENV

   IMPLICIT NONE

   ! Subroutine arguments
   integer, intent(in) :: imin,imax,jmin,jmax
   integer, intent(in) :: umask(imin-1:imax+1,jmin-1:jmax+1)
   real(real64), intent(in) :: dxu(imin-1:imax+1,jmin-1:jmax+1), dyu(imin-1:imax+1,jmin-1:jmax+1), hu(imin-1:imax+1,jmin-1:jmax+1), u(imin-1:imax+1,jmin-1:jmax+1)
   integer, intent(in) :: tmask(imin-1:imax+1,jmin-1:jmax+1)
   real(real64), intent(in) :: iA(imin-1:imax+1,jmin-1:jmax+1)
   real(real64), intent(in) :: dt
   real(real64), intent(inout) :: h(imin-1:imax+1,jmin-1:jmax+1), f(imin-1:imax+1,jmin-1:jmax+1)

!  Local constants

!  Local variables
#ifdef _AUTOMATIC_
   real(real64) :: flux(imin-1:imax,jmin:jmax)
   real(real64) :: QU(imin-1:imax,jmin:jmax)
#else
   real(real64), allocatable :: flux(:,:), QU(:,:)
#endif
   real(real64) :: cfl, fu, fuu, fd, hfo, advn
   real(real64) :: deltaf, deltafu, ratio
   real(real64) :: limiter,egon
   integer :: i, j
!---------------------------------------------------------------------------
#ifndef _AUTOMATIC_
   allocate(flux(imin-1:imax,jmin:jmax), QU(imin-1:imax,jmin:jmax))
#endif

   ! the provided velocity MUST be ZERO at land!
   QU(imin-1,:) = 0 ! assume staggered u-fields [imin:imax]
   flux(imin-1:imax,:) = 0._real64

!  TODO: (vertical) interation!!!
   do j=jmin,jmax
!KB      do i=imin,imax-1
      do i=imin,imax
         QU(i,j) = u(i,j) * hu(i,j) * dyu(i,j)
         if (umask(i,j) == 1 .or. umask(i,j) == 2) then
            cfl = abs(u(i,j)*dt/dxu(i,j))
            if (u(i,j) .gt. 0) then
               fu  = f(i,j)
               fuu = fu
!               if (i > imin) then
                  if (umask(i-1,j) == 1 .or. umask(i-1,j) == 2) fuu = f(i-1,j)
!               end if
               fd = f(i+1,j)
            else
               fu  = f(i+1,j)
               fuu = fu
!               if (i < imax-1) then
                  if (umask(i+1,j) == 1 .or. umask(i+1,j) == 2) fuu = f(i+2,j)
!               end if
               fd = f(i,j)
            end if

            deltaf  = fd - fu
            deltafu = fu - fuu
            if (deltaf*deltafu .gt. 0) then
               ratio = deltafu / deltaf   ! slope ratio
#include "limiters.h"
               fu = fu + 0.5*limiter*(1-cfl)*deltaf
            end if
            flux(i,j) = QU(i,j)*fu
         else
            flux(i,j) = 0._real64
         end if
      end do
   end do

   do j=jmin,jmax
      do i=imin,imax
         if (tmask(i,j) == 1) then
            hfo = h(i,j)*f(i,j)
!KB            h(i,j) = h(i,j) - dt*( QU(i,j)-QU(i-1,j) )*iA(i,j)
            egon = h(i,j) - dt*( QU(i,j)-QU(i-1,j) )*iA(i,j)
#if 0
            if (i==100 .and. j==73) then
write(*,*) Umask(i-1,j),Umask(i,j),Tmask(i,j)
write(*,*) hfo,h(i,j),iA(i,j)
write(*,*) QU(i,j),QU(i-1,j),QU(i,j)-QU(i-1,j)
            end if
#endif
            advn = ( flux(i,j)-flux(i-1,j) )*iA(i,j)
!KB            f(i,j) = ( hfo - dt*advn ) / h(i,j)
            f(i,j) = ( hfo - dt*advn ) / egon
#if 0
            if (i==100 .and. j==73) then
write(*,*) 'AAA ',hfo-f(i,j)*h(i,j)
            end if
#endif
         end if
      end do
   end do

!#ifndef _AUTOMATIC_
!   deallocate(flux, QU)
!#endif
   return
END SUBROUTINE _U_SUB_NAME_

SUBROUTINE _V_SUB_NAME_(imin,imax,jmin,jmax,vmask,dxv,dyv,hv,v,tmask,iA,dt,h,f)
   USE, INTRINSIC :: ISO_FORTRAN_ENV

   IMPLICIT NONE

   ! Subroutine arguments
   integer, intent(in) :: imin,imax,jmin,jmax
   integer, intent(in) :: vmask(imin-1:imax+1,jmin-1:jmax+1)
   real(real64), intent(in) :: dxv(imin-1:imax+1,jmin-1:jmax+1), dyv(imin-1:imax+1,jmin-1:jmax+1), hv(imin-1:imax+1,jmin-1:jmax+1), v(imin-1:imax+1,jmin-1:jmax+1)
   integer, intent(in) :: tmask(imin-1:imax+1,jmin-1:jmax+1)
   real(real64), intent(in) :: iA(imin-1:imax+1,jmin-1:jmax+1)
   real(real64), intent(in) :: dt
   real(real64), intent(inout) :: h(imin-1:imax+1,jmin-1:jmax+1), f(imin-1:imax+1,jmin-1:jmax+1)

!  Local constants

!  Local variables
#ifdef _AUTOMATIC_
   real(real64) :: flux(imin:imax,jmin-1:jmax)
   real(real64) :: QV(imin:imax,jmin-1:jmax)
#else
   real(real64), allocatable :: flux(:,:), QV(:,:)
#endif
   real(real64) :: cfl, fu, fuu, fd, hfo, advn
   real(real64) :: deltaf, deltafu, ratio
   real(real64) :: limiter,egon
   integer :: i, j
!---------------------------------------------------------------------------
#ifndef _AUTOMATIC_
   allocate(flux(imin:imax,jmin-1:jmax), QV(imin:imax,jmin-1:jmax))
#endif

   ! the provided velocity MUST be ZERO at land!
   QV(:,jmin-1) = 0 ! assume staggered u-fields [imin:imax]
   flux(:,jmin-1:jmax) = 0._real64

!  TODO: (vertical) interation!!!
   do j=jmin,jmax
!KB   do j=jmin,jmax-1
      do i=imin,imax
         QV(i,j) = v(i,j) * hv(i,j) * dxv(i,j)
         if (vmask(i,j) == 1 .or. vmask(i,j) == 2) then
            cfl = abs(v(i,j)*dt/dyv(i,j))
            if (v(i,j) .gt. 0) then
               fu  = f(i,j)
               fuu = fu
!               if (j > jmin) then
                  if (vmask(i,j-1) == 1 .or. vmask(i,j-1) == 2) fuu = f(i,j-1)
!               end if
               fd = f(i,j+1)
            else
               fu  = f(i,j+1)
               fuu = fu
!               if (j < jmax-1) then
                  if (vmask(i,j+1) == 1 .or. vmask(i,j+1) == 2) fuu = f(i,j+2)
!               end if
               fd = f(i,j)
            end if

            deltaf  = fd - fu
            deltafu = fu - fuu
            if (deltaf*deltafu .gt. 0) then
               ratio = deltafu / deltaf   ! slope ratio
#include "limiters.h"
               fu = fu + 0.5*limiter*(1-cfl)*deltaf
            end if
            flux(i,j) = QV(i,j)*fu
         else
            flux(i,j) = 0._real64
         end if
      end do
   end do

   do j=jmin,jmax
      do i=imin,imax
         if (tmask(i,j) == 1) then
            hfo = h(i,j)*f(i,j)
!KB            h(i,j) = h(i,j) - dt*( QV(i,j)-QV(i,j-1) )*iA(i,j)
            egon = h(i,j) - dt*( QV(i,j)-QV(i,j-1) )*iA(i,j)
#if 0
            if (i==100 .and. j==73) then
write(*,*) Vmask(i-1,j),Vmask(i,j),Tmask(i,j)
write(*,*) hfo,h(i,j),iA(i,j)
write(*,*) QV(i,j),QV(i,j-1),QV(i,j)-QV(i,j-1)
            end if
#endif
            advn = ( flux(i,j)-flux(i,j-1) )*iA(i,j)
!KB            f(i,j) = ( hfo - dt*advn ) / h(i,j)
            f(i,j) = ( hfo - dt*advn ) / egon
#if 0
            if (i==100 .and. j==73) then
write(*,*) 'BBB ',hfo-f(i,j)*h(i,j)
            end if
#endif
         end if
      end do
   end do

!#ifndef _AUTOMATIC_
!   deallocate(flux, QV)
!#endif
   return
END SUBROUTINE _V_SUB_NAME_

SUBROUTINE _W_SUB_NAME_(imin, imax, jmin, jmax, kmax, w , tmask, dt, h, f)

   USE, INTRINSIC :: ISO_FORTRAN_ENV

   IMPLICIT NONE

   ! Subroutine arguments
   integer, intent(in) :: imin, imax, jmin, jmax, kmax
   real(real64), intent(in) :: w(imin-1:imax+1,jmin-1:jmax+1,0:kmax)
   integer, intent(in) :: tmask(imin-1:imax+1,jmin-1:jmax+1)
   real(real64), intent(in) :: dt
   real(real64), target, intent(inout) :: h(imin-1:imax+1,jmin-1:jmax+1,0:kmax), f(imin-1:imax+1,jmin-1:jmax+1,0:kmax)

!  Local constants
   integer, parameter :: itersmax=200

!  Local variables
#ifdef _AUTOMATIC_
   real(real64), dimension(0:kmax) :: flux, cfl0, cfls
   real(real64), dimension(0:kmax), target :: haux, faux
#else
   real(real64), dimension(:), allocatable, save :: flux, cfl0, cfls
   real(real64), dimension(:), allocatable, target, save :: haux, faux
#endif
   real(real64), dimension(:), pointer :: p_haux, p_faux, p1d
   real(real64) :: itersm1, dtk
   real(real64) :: cfl, fu, fuu, fd, hfo, advn
   real(real64) :: deltaf, deltafu, ratio
   real(real64) :: limiter
   integer :: i, j, k, it, iters, iters_new
   logical, save :: first=.true.
!---------------------------------------------------------------------------

   if (first) then
#ifndef _AUTOMATIC_
      allocate(flux(0:kmax), cfl0(0:kmax), cfls(0:kmax), haux(0:kmax), faux(0:kmax))
#endif
      first = .false.
   end if

   flux(0   ) = 0._real64
   flux(kmax) = 0._real64


   do j=jmin,jmax
      do i=imin,imax
         if (tmask(i,j) .eq. 1) then

            do k=1,kmax-1
               cfl0(k) = ABS( w(i,j,k) ) * dt / MIN( h(i,j,k) , h(i,j,k+1) )
            end do

            iters = 1
            itersm1 = 1._real64
            dtk = dt

            p_haux => haux
            p_faux => faux

            it = 1

            do while (it .le. iters)

               if (it .eq. 1) then
                  haux = h(i,j,:)
                  faux = f(i,j,:)
                  cfls = cfl0
               else
                  do k=1,kmax-1
                     cfls(k) = ABS( w(i,j,k) ) * dt / MIN( haux(k) , haux(k+1) )
                  end do
               end if

               if (iters .lt. itersmax) then
!                 estimate number of iterations by maximum cfl number in water column
                  cfl = MAXVAL( cfls(1-0:kmax-1) )
                  iters_new = MAX( 1 , CEILING( cfl ) )
                  if (iters_new .gt. iters) then
                     if (iters_new .gt. itersmax) then
                        !STDERR 'adv_split_w: too many iterations needed: ',iters_new
                        !STDERR '             at global i j = ',ioff+i,joff+j
                        !STDERR '             cfl=',real(cfl/itersmax)
                        iters = itersmax
                     else
                        iters = iters_new
                     end if
                     itersm1 = 1._real64 / iters
                     dtk = dt * itersm1
                     if (it .gt. 1) then
#ifdef DEBUG
                        !STDERR 'adv_split_w: restart iterations during it=',it
                        !STDERR 'i=',i,' j=',j,':',iters
#endif
                        it = 1
                        cycle
                     end if
                  end if
               end if

!              Calculating w-interface fluxes !
               do k=1,kmax-1
                  cfl = cfls(k)*itersm1
                  if (w(i,j,k) .gt. 0) then
                     fu = faux(k)
                     if (k .gt. 1) then
                        fuu = faux(k-1)
                     else
                        fuu = fu
                     end if
                     fd  = faux(k+1)
                  else
                     fu = faux(k+1)
                     if (k .lt. kmax-1) then
                        fuu = faux(k+2)
                     else
                        fuu = fu
                     end if
                     fd  = faux(k  )
                  end if
                  deltaf  = fd - fu
                  deltafu = fu - fuu
                  if (deltaf*deltafu .gt. 0) then
                     ratio = deltafu / deltaf   ! slope ratio
#include "limiters.h"
                     fu = fu + 0.5*limiter*(1-cfl)*deltaf
                  end if
                  flux(k) = w(i,j,k)*fu
               end do

               if (it .eq. iters) then
                  p1d => h(i,j,:) ; p_haux(0:) => p1d
                  p1d => f(i,j,:) ; p_faux(0:) => p1d
               end if

               do k=1,kmax
                  hfo = haux(k)*faux(k)
                  p_haux(k) = haux(k) - dtk*(w(i,j,k  )-w(i,j,k-1))
                  advn = flux(k  ) - flux(k-1)
                  p_faux(k) = ( hfo - dtk*advn ) / p_haux(k)
               end do

               it = it + 1

            end do

         end if

      end do
   end do

   return
END SUBROUTINE _W_SUB_NAME_

!KB END MODULE _MODULE_NAME_

